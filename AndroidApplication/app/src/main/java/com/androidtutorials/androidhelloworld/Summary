Constructor Injection
*********************

UserRepository(private val apiService: ApiService)
UserViewModel(private val repository: UserRepository)

‚úÖ Why this is Constructor Injection
*************************************
Dependencies are passed in via constructor, not created inside class/Fragment/Activity

Factory Injection (for ViewModel)
***********************************
UserViewModelFactory injects UserRepository into UserViewModel.

Manual Composition Root (Application class)
***********************************
MyApplication wires everything together and provides repository as a singleton.



‚úÖ Pros of Your Approach
************************
No external library ‚Üí lightweight.
Clear dependency graph: you can see where each dependency is created.
Testability: You can replace ApiService or Repository with fake ones for unit tests.

‚ö†Ô∏è Cons / Limitations
*********************
Manual wiring becomes harder as the project grows (many dependencies).
You need to write boilerplate Factories for every ViewModel.
Dependency graph management is manual ‚Üí harder to track.
Not lifecycle-aware across multiple modules (compared to Hilt/Dagger)


üî• Final Summary
*****************
You are using Manual Dependency Injection.
Inside classes ‚Üí Constructor Injection.For ViewModel creation ‚Üí Factory Injection.


MyApplication acts as your Service Locator / Composition Root.