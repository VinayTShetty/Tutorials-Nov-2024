Scenario where Counter is getting executed but not updating in the UI.
*********************************************************************


package com.androidtutorials.myapplication

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview

class MainActivity : ComponentActivity() {
    private val TAG = "STATE_MANAGEMENT"
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            mainScreen()
        }
    }

    @Preview(showSystemUi = true)
    @Composable
    fun mainScreen() {
        Log.i(TAG, "mainScreen_Composoable executed")
        var counter = 0
        var incerementCounter = {
            counter++
            Log.i(TAG, "IncrementLogic: $counter")
        }

        var decrementCounter = {
            counter--
            Log.i(TAG, "DecrementLogic: $counter")
        }
        Column(modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(onClick = {
                    incerementCounter.invoke()
                    Log.i(TAG, "Increment Counter clicked ")
                }) {
                    Text(text = "Incerement")
                }
                Text(text = "0")
                Button(onClick = {
                    decrementCounter.invoke()
                    Log.i(TAG, "DecrementCounter")
                }) {
                    Text(text = "Decrement")
                }
            }
        }
    }

}
-----------------------------------------------------------------------------------------------------------------------------------------
Scenario where the counter is getting executed and UI is getting updated.
************************************************************************

package com.androidtutorials.myapplication

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview

class MainActivity : ComponentActivity() {
    private val TAG = "STATE_MANAGEMENT"
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            mainScreen()
        }
    }

    @Preview(showSystemUi = true)
    @Composable
    fun mainScreen() {
        Log.i(TAG, "mainScreen_Composoable executed")
        var counter = remember{ mutableStateOf(0) }
        var incerementCounter = {
            counter.value=++counter.value
            Log.i(TAG, "IncrementLogic: ${counter.value.toString()}")
        }

        var decrementCounter = {
            counter.value=--counter.value
            Log.i(TAG, "DecrementLogic: ${counter.value.toString()}")
        }
        Column(modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(onClick = {
                    incerementCounter.invoke()
                    Log.i(TAG, "Increment Counter clicked ")
                }) {
                    Text(text = "Incerement")
                }
                Text("${counter.value.toString()}")
                Button(onClick = {
                    decrementCounter.invoke()
                    Log.i(TAG, "DecrementCounter")
                }) {
                    Text(text = "Decrement")
                }
            }
        }
    }

}
-----------------------------------------------------------------------------------------------------------------------------------------
We can use by keyword, where the counter.value can be emitted and only counter can be used.

package com.androidtutorials.myapplication

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview

class MainActivity : ComponentActivity() {
    private val TAG = "STATE_MANAGEMENT"
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            mainScreen()
        }
    }

    @Preview(showSystemUi = true)
    @Composable
    fun mainScreen() {

        Log.i(TAG, "mainScreen_Composoable executed")

        var counter by remember { mutableStateOf(0) }

        var incerementCounter = {
            counter=++counter
            Log.i(TAG, "IncrementLogic: ${counter.toString()}")
        }

        var decrementCounter = {
            counter=--counter
            Log.i(TAG, "DecrementLogic: ${counter.toString()}")
        }
        Column(modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Button(onClick = {
                    incerementCounter.invoke()
                    Log.i(TAG, "Increment Counter clicked ")
                }) {
                    Text(text = "Incerement")
                }
                Text("${counter.toString()}")
                Button(onClick = {
                    decrementCounter.invoke()
                    Log.i(TAG, "DecrementCounter")
                }) {
                    Text(text = "Decrement")
                }
            }
        }
    }

}

-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------
